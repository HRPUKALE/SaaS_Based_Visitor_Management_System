#!/usr/bin/env python3
"""
Test admin login and token generation
"""

import sys
import os
import requests
import json

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import get_user_by_email, update_user_otp
from auth import generate_otp, get_otp_expiry

def test_admin_login():
    """Test admin login process"""
    base_url = "http://localhost:8001"
    
    # Test admin email
    admin_email = "harshadpukale131@gmail.com"
    
    print(f"Testing admin login for: {admin_email}")
    
    # Step 1: Check if admin exists in database
    admin_user = get_user_by_email(admin_email)
    if not admin_user:
        print(f"❌ Admin user {admin_email} not found in database!")
        return
    
    print(f"✅ Admin user found: {admin_user['name']} (Role: {admin_user['role']})")
    
    # Step 2: Test login endpoint (this will generate a new OTP)
    try:
        login_response = requests.post(f"{base_url}/admin/login", json={"email": admin_email})
        print(f"Login response status: {login_response.status_code}")
        if login_response.status_code == 200:
            print("✅ Login endpoint working")
        else:
            print(f"❌ Login failed: {login_response.text}")
            return
    except Exception as e:
        print(f"❌ Login request failed: {e}")
        return
    
    # Step 3: Get the OTP that was generated by the login endpoint
    admin_user_updated = get_user_by_email(admin_email)
    if not admin_user_updated or not admin_user_updated.get('otp'):
        print("❌ No OTP found after login request")
        return
    
    otp = admin_user_updated['otp']
    print(f"✅ OTP from login endpoint: {otp}")
    
    # Step 4: Test OTP verification
    try:
        verify_response = requests.post(f"{base_url}/admin/verify-otp", json={
            "email": admin_email,
            "otp": otp
        })
        print(f"OTP verification status: {verify_response.status_code}")
        
        if verify_response.status_code == 200:
            token_data = verify_response.json()
            print("✅ OTP verification successful!")
            print(f"Token: {token_data['access_token'][:20]}...")
            print(f"User: {token_data['user']['email']}")
            print(f"Role: {token_data['user']['role']}")
            
            # Step 5: Test appointments endpoint with token
            headers = {
                "Authorization": f"Bearer {token_data['access_token']}",
                "Content-Type": "application/json"
            }
            
            appointments_response = requests.get(f"{base_url}/appointments", headers=headers)
            print(f"Appointments response status: {appointments_response.status_code}")
            
            if appointments_response.status_code == 200:
                appointments = appointments_response.json()
                print(f"✅ Appointments endpoint working! Found {len(appointments)} appointments")
            else:
                print(f"❌ Appointments failed: {appointments_response.text}")
                
        else:
            print(f"❌ OTP verification failed: {verify_response.text}")
            
    except Exception as e:
        print(f"❌ OTP verification request failed: {e}")

if __name__ == "__main__":
    print("Testing admin login and appointments access...")
    test_admin_login() 